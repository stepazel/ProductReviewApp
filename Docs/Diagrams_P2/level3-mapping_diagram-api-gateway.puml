@startuml
!theme plain

component "API Gateway" as ApiGatewayService {
    Port "80" as port80
    component "Authentication API" as AuthApi <<class>>
    component "Authentication Request" as AuthReq <<class>>
    component "User Controller" as UserControl <<class>>
    component "User Mapper" as UserMapper <<abstract class>>
    component "User Details Service" as UserSvc <<interface>>
    component "User Service" as UserSvcImpl <<class>>
    component "User DTO" as UserDTO <<class>>
    component "User Model" as UserModel <<class>>
    component "User Model Mongo" as UserModelDoc <<class>>
    component "User Model JPA" as UserModelRel <<class>>
    component "User Model Neo4j" as UserModelGraph <<class>>
    component "User Repository" as UserRepo <<interface>>
    component "User Repository Document" as UserRepoDoc <<class>>
    component "User Repository Mongo" as UserRepoMongo <<interface>>
    component "User Repository Relational" as UserRepoRel <<class>>
    component "User Repository JPA" as UserRepoSQL <<interface>>
    component "User Repository Graph" as UserRepoGraph <<class>>
    component "User Repository Neo4j" as UserRepoNeo4j <<interface>>
    component "MongoDB Driver" as MongoDriver <<driver>>
    component "Neo4j Driver" as Neo4jDriver <<driver>>
    component "H2 Driver" as H2Driver <<driver>>
    Port "27017" as portMongo
    Port "7687" as portNeo4j
}

database "API Gateway Database" as ApiDB <<database>>

port80 -up- "REST API" : exposes

UserControl -up- port80

AuthApi -up- port80

UserSvcImpl -down-> UserSvc : implements
UserSvcImpl -down-> UserMapper : uses

UserControl -down-> UserSvcImpl : uses
UserControl -down-> UserDTO : data transfer

AuthApi -down-> UserMapper : uses
AuthApi -down-> UserDTO : data transfer

AuthApi -down-> AuthReq : receives

UserSvcImpl -down-> UserRepo : uses

UserModel <-down- UserSvcImpl : uses

UserRepo -down-> UserModel : uses
UserRepoMongo -down-> UserModelDoc : uses
UserRepoRel -down-> UserModelRel : uses
UserRepoGraph -down-> UserModelGraph : uses

UserRepoDoc -right-> MongoDriver : uses
UserRepoRel -down-> H2Driver : uses
UserRepoGraph -down-> Neo4jDriver : uses

UserRepoDoc -down-> UserRepoMongo : implements
UserRepoRel -down-> UserRepoSQL : implements
UserRepoGraph -down-> UserRepoNeo4j : implements

UserRepoDoc -down-> UserRepo : implements
UserRepoRel -down-> UserRepo : implements
UserRepoGraph -down-> UserRepo : implements

H2Driver -down-> ApiDB : persists to

MongoDriver -up-> portMongo : connects to
Neo4jDriver -up-> portNeo4j : connects to

portMongo -up-> ApiDB : persists to
portNeo4j -up-> ApiDB : persists to

package "ApiGateway" {
    package "Authentication"
    package "Controller"
    package "Mapper"
    package "Service"
    package "DTO"
    package "Model" {
        package "Document Models"
        package "Relational Models"
        package "Graph Models"
    }
    package "Repository" {
        package "Relational"
        package "Graph"
        package "Document"
    }
}

[Controller] ..> [Authentication]
[Controller] ..> [Service]
[Controller] ..> [DTO]
[Authentication] ..> [Mapper]
[Service] .up.> [Mapper]
[Authentication] ..> [DTO]
[Service] .u.> [Repository]
[Repository] ..> Model
Model ..> [DTO]

[Authentication] ..> AuthApi
[Authentication] ..> AuthReq
[Controller] ..> UserControl
[Service] ..> UserSvc
[Service] ..> UserSvcImpl
[Mapper] ..> UserMapper
[DTO] ..> UserDTO
[Model] ..> UserModel
[Document Models] ..> UserModelDoc
[Relational Models] ..> UserModelRel
[Graph Models] ..> UserModelGraph
[Repository] ..> UserRepo
[Document] ..> UserRepoDoc
[Document] ..> UserRepoMongo
[Relational] ..> UserRepoRel
[Relational] ..> UserRepoSQL
[Graph] ..> UserRepoGraph
[Graph] ..> UserRepoNeo4j

@enduml
